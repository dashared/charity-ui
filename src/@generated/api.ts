/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ModelsDonationRequest
 */
export interface ModelsDonationRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequest
     */
    applicant_id?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsDonationRequest
     */
    approved_amount?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequest
     */
    assignee_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequest
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequest
     */
    description?: string;
    /**
     * 
     * @type {ModelsDonee}
     * @memberof ModelsDonationRequest
     */
    donee?: ModelsDonee;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequest
     */
    donee_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequest
     */
    relationship?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequest
     */
    request_type?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsDonationRequest
     */
    requested_amount?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequest
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequest
     */
    title?: string;
}
/**
 * 
 * @export
 * @interface ModelsDonationRequestBody
 */
export interface ModelsDonationRequestBody {
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequestBody
     */
    applicant_id?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsDonationRequestBody
     */
    approved_amount?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequestBody
     */
    assignee_id?: string;
    /**
     * 
     * @type {ModelsDonee}
     * @memberof ModelsDonationRequestBody
     */
    author?: ModelsDonee;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequestBody
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequestBody
     */
    description?: string;
    /**
     * 
     * @type {ModelsDonee}
     * @memberof ModelsDonationRequestBody
     */
    donee?: ModelsDonee;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequestBody
     */
    donee_id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelsDonationRequestBody
     */
    file_id?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequestBody
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequestBody
     */
    relationship?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequestBody
     */
    request_type?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsDonationRequestBody
     */
    requested_amount?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequestBody
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequestBody
     */
    title?: string;
}
/**
 * 
 * @export
 * @interface ModelsDonationRequestInput
 */
export interface ModelsDonationRequestInput {
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequestInput
     */
    applicant_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequestInput
     */
    assignee_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequestInput
     */
    description?: string;
    /**
     * 
     * @type {ModelsDonee}
     * @memberof ModelsDonationRequestInput
     */
    donee?: ModelsDonee;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelsDonationRequestInput
     */
    file_ids?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequestInput
     */
    relationship?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsDonationRequestInput
     */
    request_amount?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequestInput
     */
    request_type?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonationRequestInput
     */
    title?: string;
}
/**
 * 
 * @export
 * @interface ModelsDonationRequestResponse
 */
export interface ModelsDonationRequestResponse {
    /**
     * 
     * @type {Array<ModelsDonationRequestBody>}
     * @memberof ModelsDonationRequestResponse
     */
    data?: Array<ModelsDonationRequestBody>;
    /**
     * 
     * @type {ModelsPageData}
     * @memberof ModelsDonationRequestResponse
     */
    page?: ModelsPageData;
}
/**
 * 
 * @export
 * @interface ModelsDonee
 */
export interface ModelsDonee {
    /**
     * 
     * @type {string}
     * @memberof ModelsDonee
     */
    first_name?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonee
     */
    last_name?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsDonee
     */
    middle_name?: string;
}
/**
 * 
 * @export
 * @interface ModelsFileResponse
 */
export interface ModelsFileResponse {
    /**
     * 
     * @type {string}
     * @memberof ModelsFileResponse
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsFileResponse
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface ModelsPageData
 */
export interface ModelsPageData {
    /**
     * 
     * @type {number}
     * @memberof ModelsPageData
     */
    page?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsPageData
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsPageData
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsPageData
     */
    totalPages?: number;
}
/**
 * 
 * @export
 * @interface ModelsUpdateDonationStatusInput
 */
export interface ModelsUpdateDonationStatusInput {
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateDonationStatusInput
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateDonationStatusInput
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface ModelsUser
 */
export interface ModelsUser {
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    first_name?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    last_name?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    middle_name?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all donation requests
         * @param {number} page Page number
         * @param {number} size Page size
         * @param {string} sort sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationRequestGet: async (page: number, size: number, sort: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling donationRequestGet.');
            }
            // verify required parameter 'size' is not null or undefined
            if (size === null || size === undefined) {
                throw new RequiredError('size','Required parameter size was null or undefined when calling donationRequestGet.');
            }
            // verify required parameter 'sort' is not null or undefined
            if (sort === null || sort === undefined) {
                throw new RequiredError('sort','Required parameter sort was null or undefined when calling donationRequestGet.');
            }
            const localVarPath = `/donation-request/`
                .replace(`{${"page"}}`, encodeURIComponent(String(page)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)))
                .replace(`{${"sort"}}`, encodeURIComponent(String(sort)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves donation request based on given ID
         * @param {string} id Donation request ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationRequestIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling donationRequestIdGet.');
            }
            const localVarPath = `/donation-request/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates donation request
         * @param {string} id Donation request Id
         * @param {ModelsUpdateDonationStatusInput} input New Donation state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationRequestIdPatch: async (id: string, input: ModelsUpdateDonationStatusInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling donationRequestIdPatch.');
            }
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input','Required parameter input was null or undefined when calling donationRequestIdPatch.');
            }
            const localVarPath = `/donation-request/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof input !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(input !== undefined ? input : {})
                : (input || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates donation request
         * @param {ModelsDonationRequestInput} request Donation request Input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationRequestPost: async (request: ModelsDonationRequestInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling donationRequestPost.');
            }
            const localVarPath = `/donation-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof request !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(request !== undefined ? request : {})
                : (request || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Uploads given file
         * @param {object} [file] File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPost: async (file?: object, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', new Blob([JSON.stringify(file)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves user based on given ID
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userIdGet.');
            }
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all donation requests
         * @param {number} page Page number
         * @param {number} size Page size
         * @param {string} sort sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async donationRequestGet(page: number, size: number, sort: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsDonationRequestResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).donationRequestGet(page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves donation request based on given ID
         * @param {string} id Donation request ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async donationRequestIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsDonationRequestBody>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).donationRequestIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates donation request
         * @param {string} id Donation request Id
         * @param {ModelsUpdateDonationStatusInput} input New Donation state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async donationRequestIdPatch(id: string, input: ModelsUpdateDonationStatusInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsDonationRequest>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).donationRequestIdPatch(id, input, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates donation request
         * @param {ModelsDonationRequestInput} request Donation request Input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async donationRequestPost(request: ModelsDonationRequestInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).donationRequestPost(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Uploads given file
         * @param {object} [file] File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadPost(file?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsFileResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).uploadPost(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves user based on given ID
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUser>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).userIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Retrieves all donation requests
         * @param {number} page Page number
         * @param {number} size Page size
         * @param {string} sort sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationRequestGet(page: number, size: number, sort: string, options?: any): AxiosPromise<ModelsDonationRequestResponse> {
            return DefaultApiFp(configuration).donationRequestGet(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves donation request based on given ID
         * @param {string} id Donation request ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationRequestIdGet(id: string, options?: any): AxiosPromise<ModelsDonationRequestBody> {
            return DefaultApiFp(configuration).donationRequestIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates donation request
         * @param {string} id Donation request Id
         * @param {ModelsUpdateDonationStatusInput} input New Donation state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationRequestIdPatch(id: string, input: ModelsUpdateDonationStatusInput, options?: any): AxiosPromise<ModelsDonationRequest> {
            return DefaultApiFp(configuration).donationRequestIdPatch(id, input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates donation request
         * @param {ModelsDonationRequestInput} request Donation request Input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donationRequestPost(request: ModelsDonationRequestInput, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).donationRequestPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Uploads given file
         * @param {object} [file] File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPost(file?: object, options?: any): AxiosPromise<ModelsFileResponse> {
            return DefaultApiFp(configuration).uploadPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves user based on given ID
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userIdGet(id: string, options?: any): AxiosPromise<ModelsUser> {
            return DefaultApiFp(configuration).userIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves all donation requests
     * @param {number} page Page number
     * @param {number} size Page size
     * @param {string} sort sort
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public donationRequestGet(page: number, size: number, sort: string, options?: any) {
        return DefaultApiFp(this.configuration).donationRequestGet(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves donation request based on given ID
     * @param {string} id Donation request ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public donationRequestIdGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).donationRequestIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates donation request
     * @param {string} id Donation request Id
     * @param {ModelsUpdateDonationStatusInput} input New Donation state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public donationRequestIdPatch(id: string, input: ModelsUpdateDonationStatusInput, options?: any) {
        return DefaultApiFp(this.configuration).donationRequestIdPatch(id, input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates donation request
     * @param {ModelsDonationRequestInput} request Donation request Input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public donationRequestPost(request: ModelsDonationRequestInput, options?: any) {
        return DefaultApiFp(this.configuration).donationRequestPost(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Uploads given file
     * @param {object} [file] File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadPost(file?: object, options?: any) {
        return DefaultApiFp(this.configuration).uploadPost(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves user based on given ID
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userIdGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).userIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


