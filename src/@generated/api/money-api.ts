/* tslint:disable */
/* eslint-disable */
/**
 * Charity API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BlockchainDeposit } from '../models';
// @ts-ignore
import { BlockchainDonateRequestInput } from '../models';
/**
 * MoneyApi - axios parameter creator
 * @export
 */
export const MoneyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Donation to an application with a given ID
         * @param {BlockchainDonateRequestInput} request DonateRequestInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMoneyDepositApplicationPost: async (request: BlockchainDonateRequestInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling apiMoneyDepositApplicationPost.');
            }
            const localVarPath = `/api/money/deposit/application`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof request !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(request !== undefined ? request : {})
                : (request || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deposit money to user with given ID
         * @param {BlockchainDeposit} request Deposit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMoneyDepositPost: async (request: BlockchainDeposit, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling apiMoneyDepositPost.');
            }
            const localVarPath = `/api/money/deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof request !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(request !== undefined ? request : {})
                : (request || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MoneyApi - functional programming interface
 * @export
 */
export const MoneyApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Donation to an application with a given ID
         * @param {BlockchainDonateRequestInput} request DonateRequestInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMoneyDepositApplicationPost(request: BlockchainDonateRequestInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MoneyApiAxiosParamCreator(configuration).apiMoneyDepositApplicationPost(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deposit money to user with given ID
         * @param {BlockchainDeposit} request Deposit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMoneyDepositPost(request: BlockchainDeposit, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MoneyApiAxiosParamCreator(configuration).apiMoneyDepositPost(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MoneyApi - factory interface
 * @export
 */
export const MoneyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Donation to an application with a given ID
         * @param {BlockchainDonateRequestInput} request DonateRequestInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMoneyDepositApplicationPost(request: BlockchainDonateRequestInput, options?: any): AxiosPromise<void> {
            return MoneyApiFp(configuration).apiMoneyDepositApplicationPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deposit money to user with given ID
         * @param {BlockchainDeposit} request Deposit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMoneyDepositPost(request: BlockchainDeposit, options?: any): AxiosPromise<void> {
            return MoneyApiFp(configuration).apiMoneyDepositPost(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiMoneyDepositApplicationPost operation in MoneyApi.
 * @export
 * @interface MoneyApiApiMoneyDepositApplicationPostRequest
 */
export interface MoneyApiApiMoneyDepositApplicationPostRequest {
    /**
     * DonateRequestInput
     * @type {BlockchainDonateRequestInput}
     * @memberof MoneyApiApiMoneyDepositApplicationPost
     */
    readonly request: BlockchainDonateRequestInput
}

/**
 * Request parameters for apiMoneyDepositPost operation in MoneyApi.
 * @export
 * @interface MoneyApiApiMoneyDepositPostRequest
 */
export interface MoneyApiApiMoneyDepositPostRequest {
    /**
     * Deposit
     * @type {BlockchainDeposit}
     * @memberof MoneyApiApiMoneyDepositPost
     */
    readonly request: BlockchainDeposit
}

/**
 * MoneyApi - object-oriented interface
 * @export
 * @class MoneyApi
 * @extends {BaseAPI}
 */
export class MoneyApi extends BaseAPI {
    /**
     * 
     * @summary Donation to an application with a given ID
     * @param {MoneyApiApiMoneyDepositApplicationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoneyApi
     */
    public apiMoneyDepositApplicationPost(requestParameters: MoneyApiApiMoneyDepositApplicationPostRequest, options?: any) {
        return MoneyApiFp(this.configuration).apiMoneyDepositApplicationPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deposit money to user with given ID
     * @param {MoneyApiApiMoneyDepositPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoneyApi
     */
    public apiMoneyDepositPost(requestParameters: MoneyApiApiMoneyDepositPostRequest, options?: any) {
        return MoneyApiFp(this.configuration).apiMoneyDepositPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }
}
