/* tslint:disable */
/* eslint-disable */
/**
 * Charity API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DonationRequestBody } from '../models';
// @ts-ignore
import { DonationRequestComment } from '../models';
// @ts-ignore
import { DonationRequestDonationRequest } from '../models';
// @ts-ignore
import { DonationRequestHistoryResponse } from '../models';
// @ts-ignore
import { DonationRequestInput } from '../models';
// @ts-ignore
import { DonationRequestResponse } from '../models';
// @ts-ignore
import { DonationRequestReviewResponse } from '../models';
// @ts-ignore
import { DonationRequestSubmitReviewInput } from '../models';
// @ts-ignore
import { DonationRequestSuperManagerInput } from '../models';
// @ts-ignore
import { DonationRequestUpdateInput } from '../models';
// @ts-ignore
import { DonationRequestUpdateStatusInput } from '../models';
/**
 * DonationRequestApi - axios parameter creator
 * @export
 */
export const DonationRequestApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 
     * @summary Creates donation request from fund
     * @param {DonationRequestSuperManagerInput} request Donation request Input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestFromManagerPost: async (request: DonationRequestSuperManagerInput, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError('request', 'Required parameter request was null or undefined when calling apiDonationRequestFromManagerPost.');
      }
      const localVarPath = `/api/donation-request/from_manager`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;



      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const nonString = typeof request !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(request !== undefined ? request : {})
        : (request || "");

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @summary Retrieves all donation requests
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {string} [sort] Sort param
     * @param {Array<string>} [author] request author id
     * @param {Array<string>} [assignee] request assignee id
     * @param {Array<string>} [status] request status
     * @param {Array<string>} [category] request category
     * @param {string} [searchString] id &#x3D;&#x3D; searchString OR title LIKE searchString OR description LIKE searchString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestGet: async (page?: number, size?: number, sort?: string, author?: Array<string>, assignee?: Array<string>, status?: Array<string>, category?: Array<string>, searchString?: string, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/donation-request/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort;
      }

      if (author) {
        localVarQueryParameter['author'] = author;
      }

      if (assignee) {
        localVarQueryParameter['assignee'] = assignee;
      }

      if (category) {
        localVarQueryParameter['category'] = category;
      }

      if (searchString !== undefined) {
        localVarQueryParameter['searchString'] = searchString;
      }


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      // status=a&status=b
      if (status) {
        for (const index in status) {
          queryParameters.append('status', status[index]);
        }
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @summary Get comments for a given application
     * @param {number} id donation request id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestIdCommentsGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiDonationRequestIdCommentsGet.');
      }
      const localVarPath = `/api/donation-request/{id}/comments`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;



      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @summary Retrieves donation request based on given ID
     * @param {number} id Donation request ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiDonationRequestIdGet.');
      }
      const localVarPath = `/api/donation-request/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;



      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @summary Get all SuperManagers responsible for category of application
     * @param {number} id donation request id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestIdGetAllReviewersGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiDonationRequestIdGetAllReviewersGet.');
      }
      const localVarPath = `/api/donation-request/{id}/get_all_reviewers`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;



      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @summary Gets history of status changes
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {string} [sort] sort
     * @param {number} id donation request id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    // @ts-ignore
    apiDonationRequestIdHistoryGet: async (page?: number, size?: number, sort?: string, id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiDonationRequestIdHistoryGet.');
      }
      const localVarPath = `/api/donation-request/{id}/history`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort;
      }



      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @summary Updates donation request
     * @param {number} id Donation request ID
     * @param {DonationRequestUpdateInput} request Donation request Input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestIdPatch: async (id: number, request: DonationRequestUpdateInput, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiDonationRequestIdPatch.');
      }
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError('request', 'Required parameter request was null or undefined when calling apiDonationRequestIdPatch.');
      }
      const localVarPath = `/api/donation-request/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;



      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const nonString = typeof request !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(request !== undefined ? request : {})
        : (request || "");

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @summary RollBacks status of donation request
     * @param {number} id donation request id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestIdStatusDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiDonationRequestIdStatusDelete.');
      }
      const localVarPath = `/api/donation-request/{id}/status`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;



      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @summary Updates status of donation request
     * @param {number} id donation request id
     * @param {DonationRequestUpdateStatusInput} [input] Status and message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestIdStatusPatch: async (id: number, input?: DonationRequestUpdateStatusInput, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiDonationRequestIdStatusPatch.');
      }
      const localVarPath = `/api/donation-request/{id}/status`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;



      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const nonString = typeof input !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(input !== undefined ? input : {})
        : (input || "");

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @summary Submit result of application review
     * @param {number} id donation request id
     * @param {DonationRequestSubmitReviewInput} request Donation request Input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestIdSubmitReviewPatch: async (id: number, request: DonationRequestSubmitReviewInput, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiDonationRequestIdSubmitReviewPatch.');
      }
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError('request', 'Required parameter request was null or undefined when calling apiDonationRequestIdSubmitReviewPatch.');
      }
      const localVarPath = `/api/donation-request/{id}/submit_review`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;



      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const nonString = typeof request !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(request !== undefined ? request : {})
        : (request || "");

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @summary Creates donation request
     * @param {DonationRequestInput} request Donation request Input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestPost: async (request: DonationRequestInput, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      if (request === null || request === undefined) {
        throw new RequiredError('request', 'Required parameter request was null or undefined when calling apiDonationRequestPost.');
      }
      const localVarPath = `/api/donation-request`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;



      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const nonString = typeof request !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(request !== undefined ? request : {})
        : (request || "");

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * DonationRequestApi - functional programming interface
 * @export
 */
export const DonationRequestApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 
     * @summary Creates donation request from fund
     * @param {DonationRequestSuperManagerInput} request Donation request Input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDonationRequestFromManagerPost(request: DonationRequestSuperManagerInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await DonationRequestApiAxiosParamCreator(configuration).apiDonationRequestFromManagerPost(request, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 
     * @summary Retrieves all donation requests
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {string} [sort] Sort param
     * @param {Array<string>} [author] request author id
     * @param {Array<string>} [assignee] request assignee id
     * @param {Array<string>} [status] request status
     * @param {Array<string>} [category] request category
     * @param {string} [searchString] id &#x3D;&#x3D; searchString OR title LIKE searchString OR description LIKE searchString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDonationRequestGet(page?: number, size?: number, sort?: string, author?: Array<string>, assignee?: Array<string>, status?: Array<string>, category?: Array<string>, searchString?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonationRequestResponse>> {
      const localVarAxiosArgs = await DonationRequestApiAxiosParamCreator(configuration).apiDonationRequestGet(page, size, sort, author, assignee, status, category, searchString, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 
     * @summary Get comments for a given application
     * @param {number} id donation request id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDonationRequestIdCommentsGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DonationRequestComment>>> {
      const localVarAxiosArgs = await DonationRequestApiAxiosParamCreator(configuration).apiDonationRequestIdCommentsGet(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 
     * @summary Retrieves donation request based on given ID
     * @param {number} id Donation request ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDonationRequestIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonationRequestBody>> {
      const localVarAxiosArgs = await DonationRequestApiAxiosParamCreator(configuration).apiDonationRequestIdGet(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 
     * @summary Get all SuperManagers responsible for category of application
     * @param {number} id donation request id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDonationRequestIdGetAllReviewersGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonationRequestReviewResponse>> {
      const localVarAxiosArgs = await DonationRequestApiAxiosParamCreator(configuration).apiDonationRequestIdGetAllReviewersGet(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 
     * @summary Gets history of status changes
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {string} [sort] sort
     * @param {number} id donation request id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    // @ts-ignore
    async apiDonationRequestIdHistoryGet(page?: number, size?: number, sort?: string, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonationRequestHistoryResponse>> {
      const localVarAxiosArgs = await DonationRequestApiAxiosParamCreator(configuration).apiDonationRequestIdHistoryGet(page, size, sort, id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 
     * @summary Updates donation request
     * @param {number} id Donation request ID
     * @param {DonationRequestUpdateInput} request Donation request Input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDonationRequestIdPatch(id: number, request: DonationRequestUpdateInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await DonationRequestApiAxiosParamCreator(configuration).apiDonationRequestIdPatch(id, request, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 
     * @summary RollBacks status of donation request
     * @param {number} id donation request id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDonationRequestIdStatusDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonationRequestDonationRequest>> {
      const localVarAxiosArgs = await DonationRequestApiAxiosParamCreator(configuration).apiDonationRequestIdStatusDelete(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 
     * @summary Updates status of donation request
     * @param {number} id donation request id
     * @param {DonationRequestUpdateStatusInput} [input] Status and message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDonationRequestIdStatusPatch(id: number, input?: DonationRequestUpdateStatusInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await DonationRequestApiAxiosParamCreator(configuration).apiDonationRequestIdStatusPatch(id, input, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 
     * @summary Submit result of application review
     * @param {number} id donation request id
     * @param {DonationRequestSubmitReviewInput} request Donation request Input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDonationRequestIdSubmitReviewPatch(id: number, request: DonationRequestSubmitReviewInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await DonationRequestApiAxiosParamCreator(configuration).apiDonationRequestIdSubmitReviewPatch(id, request, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 
     * @summary Creates donation request
     * @param {DonationRequestInput} request Donation request Input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDonationRequestPost(request: DonationRequestInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await DonationRequestApiAxiosParamCreator(configuration).apiDonationRequestPost(request, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * DonationRequestApi - factory interface
 * @export
 */
export const DonationRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     * 
     * @summary Creates donation request from fund
     * @param {DonationRequestSuperManagerInput} request Donation request Input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestFromManagerPost(request: DonationRequestSuperManagerInput, options?: any): AxiosPromise<void> {
      return DonationRequestApiFp(configuration).apiDonationRequestFromManagerPost(request, options).then((request) => request(axios, basePath));
    },
    /**
     * 
     * @summary Retrieves all donation requests
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {string} [sort] Sort param
     * @param {Array<string>} [author] request author id
     * @param {Array<string>} [assignee] request assignee id
     * @param {Array<string>} [status] request status
     * @param {Array<string>} [category] request category
     * @param {string} [searchString] id &#x3D;&#x3D; searchString OR title LIKE searchString OR description LIKE searchString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestGet(page?: number, size?: number, sort?: string, author?: Array<string>, assignee?: Array<string>, status?: Array<string>, category?: Array<string>, searchString?: string, options?: any): AxiosPromise<DonationRequestResponse> {
      return DonationRequestApiFp(configuration).apiDonationRequestGet(page, size, sort, author, assignee, status, category, searchString, options).then((request) => request(axios, basePath));
    },
    /**
     * 
     * @summary Get comments for a given application
     * @param {number} id donation request id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestIdCommentsGet(id: number, options?: any): AxiosPromise<Array<DonationRequestComment>> {
      return DonationRequestApiFp(configuration).apiDonationRequestIdCommentsGet(id, options).then((request) => request(axios, basePath));
    },
    /**
     * 
     * @summary Retrieves donation request based on given ID
     * @param {number} id Donation request ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestIdGet(id: number, options?: any): AxiosPromise<DonationRequestBody> {
      return DonationRequestApiFp(configuration).apiDonationRequestIdGet(id, options).then((request) => request(axios, basePath));
    },
    /**
     * 
     * @summary Get all SuperManagers responsible for category of application
     * @param {number} id donation request id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestIdGetAllReviewersGet(id: number, options?: any): AxiosPromise<DonationRequestReviewResponse> {
      return DonationRequestApiFp(configuration).apiDonationRequestIdGetAllReviewersGet(id, options).then((request) => request(axios, basePath));
    },
    /**
     * 
     * @summary Gets history of status changes
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {string} [sort] sort
     * @param {number} id donation request id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    // @ts-ignore
    apiDonationRequestIdHistoryGet(page?: number, size?: number, sort?: string, id: number, options?: any): AxiosPromise<DonationRequestHistoryResponse> {
      return DonationRequestApiFp(configuration).apiDonationRequestIdHistoryGet(page, size, sort, id, options).then((request) => request(axios, basePath));
    },
    /**
     * 
     * @summary Updates donation request
     * @param {number} id Donation request ID
     * @param {DonationRequestUpdateInput} request Donation request Input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestIdPatch(id: number, request: DonationRequestUpdateInput, options?: any): AxiosPromise<void> {
      return DonationRequestApiFp(configuration).apiDonationRequestIdPatch(id, request, options).then((request) => request(axios, basePath));
    },
    /**
     * 
     * @summary RollBacks status of donation request
     * @param {number} id donation request id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestIdStatusDelete(id: number, options?: any): AxiosPromise<DonationRequestDonationRequest> {
      return DonationRequestApiFp(configuration).apiDonationRequestIdStatusDelete(id, options).then((request) => request(axios, basePath));
    },
    /**
     * 
     * @summary Updates status of donation request
     * @param {number} id donation request id
     * @param {DonationRequestUpdateStatusInput} [input] Status and message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestIdStatusPatch(id: number, input?: DonationRequestUpdateStatusInput, options?: any): AxiosPromise<void> {
      return DonationRequestApiFp(configuration).apiDonationRequestIdStatusPatch(id, input, options).then((request) => request(axios, basePath));
    },
    /**
     * 
     * @summary Submit result of application review
     * @param {number} id donation request id
     * @param {DonationRequestSubmitReviewInput} request Donation request Input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestIdSubmitReviewPatch(id: number, request: DonationRequestSubmitReviewInput, options?: any): AxiosPromise<void> {
      return DonationRequestApiFp(configuration).apiDonationRequestIdSubmitReviewPatch(id, request, options).then((request) => request(axios, basePath));
    },
    /**
     * 
     * @summary Creates donation request
     * @param {DonationRequestInput} request Donation request Input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDonationRequestPost(request: DonationRequestInput, options?: any): AxiosPromise<void> {
      return DonationRequestApiFp(configuration).apiDonationRequestPost(request, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for apiDonationRequestFromManagerPost operation in DonationRequestApi.
 * @export
 * @interface DonationRequestApiApiDonationRequestFromManagerPostRequest
 */
export interface DonationRequestApiApiDonationRequestFromManagerPostRequest {
  /**
   * Donation request Input
   * @type {DonationRequestSuperManagerInput}
   * @memberof DonationRequestApiApiDonationRequestFromManagerPost
   */
  readonly request: DonationRequestSuperManagerInput
}

/**
 * Request parameters for apiDonationRequestGet operation in DonationRequestApi.
 * @export
 * @interface DonationRequestApiApiDonationRequestGetRequest
 */
export interface DonationRequestApiApiDonationRequestGetRequest {
  /**
   * Page number
   * @type {number}
   * @memberof DonationRequestApiApiDonationRequestGet
   */
  readonly page?: number

  /**
   * Page size
   * @type {number}
   * @memberof DonationRequestApiApiDonationRequestGet
   */
  readonly size?: number

  /**
   * Sort param
   * @type {string}
   * @memberof DonationRequestApiApiDonationRequestGet
   */
  readonly sort?: string

  /**
   * request author id
   * @type {Array<string>}
   * @memberof DonationRequestApiApiDonationRequestGet
   */
  readonly author?: Array<string>

  /**
   * request assignee id
   * @type {Array<string>}
   * @memberof DonationRequestApiApiDonationRequestGet
   */
  readonly assignee?: Array<string>

  /**
   * request status
   * @type {Array<string>}
   * @memberof DonationRequestApiApiDonationRequestGet
   */
  readonly status?: Array<string>

  /**
   * request category
   * @type {Array<string>}
   * @memberof DonationRequestApiApiDonationRequestGet
   */
  readonly category?: Array<string>

  /**
   * id &#x3D;&#x3D; searchString OR title LIKE searchString OR description LIKE searchString
   * @type {string}
   * @memberof DonationRequestApiApiDonationRequestGet
   */
  readonly searchString?: string
}

/**
 * Request parameters for apiDonationRequestIdCommentsGet operation in DonationRequestApi.
 * @export
 * @interface DonationRequestApiApiDonationRequestIdCommentsGetRequest
 */
export interface DonationRequestApiApiDonationRequestIdCommentsGetRequest {
  /**
   * donation request id
   * @type {number}
   * @memberof DonationRequestApiApiDonationRequestIdCommentsGet
   */
  readonly id: number
}

/**
 * Request parameters for apiDonationRequestIdGet operation in DonationRequestApi.
 * @export
 * @interface DonationRequestApiApiDonationRequestIdGetRequest
 */
export interface DonationRequestApiApiDonationRequestIdGetRequest {
  /**
   * Donation request ID
   * @type {number}
   * @memberof DonationRequestApiApiDonationRequestIdGet
   */
  readonly id: number
}

/**
 * Request parameters for apiDonationRequestIdGetAllReviewersGet operation in DonationRequestApi.
 * @export
 * @interface DonationRequestApiApiDonationRequestIdGetAllReviewersGetRequest
 */
export interface DonationRequestApiApiDonationRequestIdGetAllReviewersGetRequest {
  /**
   * donation request id
   * @type {number}
   * @memberof DonationRequestApiApiDonationRequestIdGetAllReviewersGet
   */
  readonly id: number
}

/**
 * Request parameters for apiDonationRequestIdHistoryGet operation in DonationRequestApi.
 * @export
 * @interface DonationRequestApiApiDonationRequestIdHistoryGetRequest
 */
export interface DonationRequestApiApiDonationRequestIdHistoryGetRequest {
  /**
   * Page number
   * @type {number}
   * @memberof DonationRequestApiApiDonationRequestIdHistoryGet
   */
  readonly page?: number

  /**
   * Page size
   * @type {number}
   * @memberof DonationRequestApiApiDonationRequestIdHistoryGet
   */
  readonly size?: number

  /**
   * sort
   * @type {string}
   * @memberof DonationRequestApiApiDonationRequestIdHistoryGet
   */
  readonly sort?: string

  /**
   * donation request id
   * @type {number}
   * @memberof DonationRequestApiApiDonationRequestIdHistoryGet
   */
  readonly id: number
}

/**
 * Request parameters for apiDonationRequestIdPatch operation in DonationRequestApi.
 * @export
 * @interface DonationRequestApiApiDonationRequestIdPatchRequest
 */
export interface DonationRequestApiApiDonationRequestIdPatchRequest {
  /**
   * Donation request ID
   * @type {number}
   * @memberof DonationRequestApiApiDonationRequestIdPatch
   */
  readonly id: number

  /**
   * Donation request Input
   * @type {DonationRequestUpdateInput}
   * @memberof DonationRequestApiApiDonationRequestIdPatch
   */
  readonly request: DonationRequestUpdateInput
}

/**
 * Request parameters for apiDonationRequestIdStatusDelete operation in DonationRequestApi.
 * @export
 * @interface DonationRequestApiApiDonationRequestIdStatusDeleteRequest
 */
export interface DonationRequestApiApiDonationRequestIdStatusDeleteRequest {
  /**
   * donation request id
   * @type {number}
   * @memberof DonationRequestApiApiDonationRequestIdStatusDelete
   */
  readonly id: number
}

/**
 * Request parameters for apiDonationRequestIdStatusPatch operation in DonationRequestApi.
 * @export
 * @interface DonationRequestApiApiDonationRequestIdStatusPatchRequest
 */
export interface DonationRequestApiApiDonationRequestIdStatusPatchRequest {
  /**
   * donation request id
   * @type {number}
   * @memberof DonationRequestApiApiDonationRequestIdStatusPatch
   */
  readonly id: number

  /**
   * Status and message
   * @type {DonationRequestUpdateStatusInput}
   * @memberof DonationRequestApiApiDonationRequestIdStatusPatch
   */
  readonly input?: DonationRequestUpdateStatusInput
}

/**
 * Request parameters for apiDonationRequestIdSubmitReviewPatch operation in DonationRequestApi.
 * @export
 * @interface DonationRequestApiApiDonationRequestIdSubmitReviewPatchRequest
 */
export interface DonationRequestApiApiDonationRequestIdSubmitReviewPatchRequest {
  /**
   * donation request id
   * @type {number}
   * @memberof DonationRequestApiApiDonationRequestIdSubmitReviewPatch
   */
  readonly id: number

  /**
   * Donation request Input
   * @type {DonationRequestSubmitReviewInput}
   * @memberof DonationRequestApiApiDonationRequestIdSubmitReviewPatch
   */
  readonly request: DonationRequestSubmitReviewInput
}

/**
 * Request parameters for apiDonationRequestPost operation in DonationRequestApi.
 * @export
 * @interface DonationRequestApiApiDonationRequestPostRequest
 */
export interface DonationRequestApiApiDonationRequestPostRequest {
  /**
   * Donation request Input
   * @type {DonationRequestInput}
   * @memberof DonationRequestApiApiDonationRequestPost
   */
  readonly request: DonationRequestInput
}

/**
 * DonationRequestApi - object-oriented interface
 * @export
 * @class DonationRequestApi
 * @extends {BaseAPI}
 */
export class DonationRequestApi extends BaseAPI {
  /**
   * 
   * @summary Creates donation request from fund
   * @param {DonationRequestApiApiDonationRequestFromManagerPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationRequestApi
   */
  public apiDonationRequestFromManagerPost(requestParameters: DonationRequestApiApiDonationRequestFromManagerPostRequest, options?: any) {
    return DonationRequestApiFp(this.configuration).apiDonationRequestFromManagerPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Retrieves all donation requests
   * @param {DonationRequestApiApiDonationRequestGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationRequestApi
   */
  public apiDonationRequestGet(requestParameters: DonationRequestApiApiDonationRequestGetRequest = {}, options?: any) {
    return DonationRequestApiFp(this.configuration).apiDonationRequestGet(requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.author, requestParameters.assignee, requestParameters.status, requestParameters.category, requestParameters.searchString, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Get comments for a given application
   * @param {DonationRequestApiApiDonationRequestIdCommentsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationRequestApi
   */
  public apiDonationRequestIdCommentsGet(requestParameters: DonationRequestApiApiDonationRequestIdCommentsGetRequest, options?: any) {
    return DonationRequestApiFp(this.configuration).apiDonationRequestIdCommentsGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Retrieves donation request based on given ID
   * @param {DonationRequestApiApiDonationRequestIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationRequestApi
   */
  public apiDonationRequestIdGet(requestParameters: DonationRequestApiApiDonationRequestIdGetRequest, options?: any) {
    return DonationRequestApiFp(this.configuration).apiDonationRequestIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Get all SuperManagers responsible for category of application
   * @param {DonationRequestApiApiDonationRequestIdGetAllReviewersGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationRequestApi
   */
  public apiDonationRequestIdGetAllReviewersGet(requestParameters: DonationRequestApiApiDonationRequestIdGetAllReviewersGetRequest, options?: any) {
    return DonationRequestApiFp(this.configuration).apiDonationRequestIdGetAllReviewersGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Gets history of status changes
   * @param {DonationRequestApiApiDonationRequestIdHistoryGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationRequestApi
   */
  public apiDonationRequestIdHistoryGet(requestParameters: DonationRequestApiApiDonationRequestIdHistoryGetRequest, options?: any) {
    return DonationRequestApiFp(this.configuration).apiDonationRequestIdHistoryGet(requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Updates donation request
   * @param {DonationRequestApiApiDonationRequestIdPatchRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationRequestApi
   */
  public apiDonationRequestIdPatch(requestParameters: DonationRequestApiApiDonationRequestIdPatchRequest, options?: any) {
    return DonationRequestApiFp(this.configuration).apiDonationRequestIdPatch(requestParameters.id, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary RollBacks status of donation request
   * @param {DonationRequestApiApiDonationRequestIdStatusDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationRequestApi
   */
  public apiDonationRequestIdStatusDelete(requestParameters: DonationRequestApiApiDonationRequestIdStatusDeleteRequest, options?: any) {
    return DonationRequestApiFp(this.configuration).apiDonationRequestIdStatusDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Updates status of donation request
   * @param {DonationRequestApiApiDonationRequestIdStatusPatchRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationRequestApi
   */
  public apiDonationRequestIdStatusPatch(requestParameters: DonationRequestApiApiDonationRequestIdStatusPatchRequest, options?: any) {
    return DonationRequestApiFp(this.configuration).apiDonationRequestIdStatusPatch(requestParameters.id, requestParameters.input, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Submit result of application review
   * @param {DonationRequestApiApiDonationRequestIdSubmitReviewPatchRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationRequestApi
   */
  public apiDonationRequestIdSubmitReviewPatch(requestParameters: DonationRequestApiApiDonationRequestIdSubmitReviewPatchRequest, options?: any) {
    return DonationRequestApiFp(this.configuration).apiDonationRequestIdSubmitReviewPatch(requestParameters.id, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Creates donation request
   * @param {DonationRequestApiApiDonationRequestPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationRequestApi
   */
  public apiDonationRequestPost(requestParameters: DonationRequestApiApiDonationRequestPostRequest, options?: any) {
    return DonationRequestApiFp(this.configuration).apiDonationRequestPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
  }
}
