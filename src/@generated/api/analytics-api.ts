/* tslint:disable */
/* eslint-disable */
/**
 * Charity API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnalyticsOneMonthProfit } from '../models';
// @ts-ignore
import { AnalyticsOneMonthRegistrations } from '../models';
// @ts-ignore
import { AnalyticsTopCategory } from '../models';
/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
export const AnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get sum of all donations by month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalyticsGetDonationsSumByMonthGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/analytics/get_donations_sum_by_month`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get number of registrations by month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalyticsGetRegistrationsCountByMonthGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/analytics/get_registrations_count_by_month`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get number of times category was used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalyticsGetTopCategoriesCountGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/analytics/get_top_categories_count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnalyticsApi - functional programming interface
 * @export
 */
export const AnalyticsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get sum of all donations by month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalyticsGetDonationsSumByMonthGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnalyticsOneMonthProfit>>> {
            const localVarAxiosArgs = await AnalyticsApiAxiosParamCreator(configuration).apiAnalyticsGetDonationsSumByMonthGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get number of registrations by month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalyticsGetRegistrationsCountByMonthGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnalyticsOneMonthRegistrations>>> {
            const localVarAxiosArgs = await AnalyticsApiAxiosParamCreator(configuration).apiAnalyticsGetRegistrationsCountByMonthGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get number of times category was used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnalyticsGetTopCategoriesCountGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnalyticsTopCategory>>> {
            const localVarAxiosArgs = await AnalyticsApiAxiosParamCreator(configuration).apiAnalyticsGetTopCategoriesCountGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AnalyticsApi - factory interface
 * @export
 */
export const AnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get sum of all donations by month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalyticsGetDonationsSumByMonthGet(options?: any): AxiosPromise<Array<AnalyticsOneMonthProfit>> {
            return AnalyticsApiFp(configuration).apiAnalyticsGetDonationsSumByMonthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get number of registrations by month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalyticsGetRegistrationsCountByMonthGet(options?: any): AxiosPromise<Array<AnalyticsOneMonthRegistrations>> {
            return AnalyticsApiFp(configuration).apiAnalyticsGetRegistrationsCountByMonthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get number of times category was used
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnalyticsGetTopCategoriesCountGet(options?: any): AxiosPromise<Array<AnalyticsTopCategory>> {
            return AnalyticsApiFp(configuration).apiAnalyticsGetTopCategoriesCountGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
export class AnalyticsApi extends BaseAPI {
    /**
     * Get sum of all donations by month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public apiAnalyticsGetDonationsSumByMonthGet(options?: any) {
        return AnalyticsApiFp(this.configuration).apiAnalyticsGetDonationsSumByMonthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get number of registrations by month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public apiAnalyticsGetRegistrationsCountByMonthGet(options?: any) {
        return AnalyticsApiFp(this.configuration).apiAnalyticsGetRegistrationsCountByMonthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get number of times category was used
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public apiAnalyticsGetTopCategoriesCountGet(options?: any) {
        return AnalyticsApiFp(this.configuration).apiAnalyticsGetTopCategoriesCountGet(options).then((request) => request(this.axios, this.basePath));
    }
}
