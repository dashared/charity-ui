/* tslint:disable */
/* eslint-disable */
/**
 * Charity API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChatAdminInput } from '../models';
// @ts-ignore
import { ChatDialog } from '../models';
// @ts-ignore
import { ChatDialogResponse } from '../models';
// @ts-ignore
import { ChatMessage } from '../models';
// @ts-ignore
import { ChatMessagesResponse } from '../models';
/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 
     * @summary Get list of all dialogs from operator
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {string} [sort] Sort param
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiChatDialogsGet: async (page?: number, size?: number, sort?: string, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/chat/dialogs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort;
      }



      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @summary Get dialog entity
     * @param {string} id Dialog id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiChatDialogsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiChatDialogsIdGet.');
      }
      const localVarPath = `/api/chat/dialogs/:id`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;



      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @summary Get messages by dialog id
     * @param {number} [size] Page size
     * @param {string} id Dialog id
     * @param {string} [cursor] id of last displayed message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    // @ts-ignore
    apiChatDialogsIdMessagesGet: async (size?: number, id: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiChatDialogsIdMessagesGet.');
      }
      const localVarPath = `/api/chat/dialogs/:id/messages`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (size !== undefined) {
        localVarQueryParameter['size'] = size;
      }

      if (cursor !== undefined) {
        localVarQueryParameter['cursor'] = cursor;
      }



      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @summary Send message from operator
     * @param {ChatAdminInput} [body] Message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiChatOperatorPost: async (body?: ChatAdminInput, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/chat/operator`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;



      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const nonString = typeof body !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : (body || "");

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 
     * @summary Get list of all dialogs from operator
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {string} [sort] Sort param
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiChatDialogsGet(page?: number, size?: number, sort?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatDialogResponse>> {
      const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).apiChatDialogsGet(page, size, sort, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 
     * @summary Get dialog entity
     * @param {string} id Dialog id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiChatDialogsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatDialog>> {
      const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).apiChatDialogsIdGet(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 
     * @summary Get messages by dialog id
     * @param {number} [size] Page size
     * @param {string} id Dialog id
     * @param {string} [cursor] id of last displayed message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    // @ts-ignore
    async apiChatDialogsIdMessagesGet(size?: number, id: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatMessagesResponse>> {
      const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).apiChatDialogsIdMessagesGet(size, id, cursor, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 
     * @summary Send message from operator
     * @param {ChatAdminInput} [body] Message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiChatOperatorPost(body?: ChatAdminInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatMessage>> {
      const localVarAxiosArgs = await ChatApiAxiosParamCreator(configuration).apiChatOperatorPost(body, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     * 
     * @summary Get list of all dialogs from operator
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {string} [sort] Sort param
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiChatDialogsGet(page?: number, size?: number, sort?: string, options?: any): AxiosPromise<ChatDialogResponse> {
      return ChatApiFp(configuration).apiChatDialogsGet(page, size, sort, options).then((request) => request(axios, basePath));
    },
    /**
     * 
     * @summary Get dialog entity
     * @param {string} id Dialog id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiChatDialogsIdGet(id: string, options?: any): AxiosPromise<ChatDialog> {
      return ChatApiFp(configuration).apiChatDialogsIdGet(id, options).then((request) => request(axios, basePath));
    },
    /**
     * 
     * @summary Get messages by dialog id
     * @param {number} [size] Page size
     * @param {string} id Dialog id
     * @param {string} [cursor] id of last displayed message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    // @ts-ignore
    apiChatDialogsIdMessagesGet(size?: number, id: string, cursor?: string, options?: any): AxiosPromise<ChatMessagesResponse> {
      return ChatApiFp(configuration).apiChatDialogsIdMessagesGet(size, id, cursor, options).then((request) => request(axios, basePath));
    },
    /**
     * 
     * @summary Send message from operator
     * @param {ChatAdminInput} [body] Message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiChatOperatorPost(body?: ChatAdminInput, options?: any): AxiosPromise<ChatMessage> {
      return ChatApiFp(configuration).apiChatOperatorPost(body, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for apiChatDialogsGet operation in ChatApi.
 * @export
 * @interface ChatApiApiChatDialogsGetRequest
 */
export interface ChatApiApiChatDialogsGetRequest {
  /**
   * Page number
   * @type {number}
   * @memberof ChatApiApiChatDialogsGet
   */
  readonly page?: number

  /**
   * Page size
   * @type {number}
   * @memberof ChatApiApiChatDialogsGet
   */
  readonly size?: number

  /**
   * Sort param
   * @type {string}
   * @memberof ChatApiApiChatDialogsGet
   */
  readonly sort?: string
}

/**
 * Request parameters for apiChatDialogsIdGet operation in ChatApi.
 * @export
 * @interface ChatApiApiChatDialogsIdGetRequest
 */
export interface ChatApiApiChatDialogsIdGetRequest {
  /**
   * Dialog id
   * @type {string}
   * @memberof ChatApiApiChatDialogsIdGet
   */
  readonly id: string
}

/**
 * Request parameters for apiChatDialogsIdMessagesGet operation in ChatApi.
 * @export
 * @interface ChatApiApiChatDialogsIdMessagesGetRequest
 */
export interface ChatApiApiChatDialogsIdMessagesGetRequest {
  /**
   * Page size
   * @type {number}
   * @memberof ChatApiApiChatDialogsIdMessagesGet
   */
  readonly size?: number

  /**
   * Dialog id
   * @type {string}
   * @memberof ChatApiApiChatDialogsIdMessagesGet
   */
  readonly id: string

  /**
   * id of last displayed message
   * @type {string}
   * @memberof ChatApiApiChatDialogsIdMessagesGet
   */
  readonly cursor?: string
}

/**
 * Request parameters for apiChatOperatorPost operation in ChatApi.
 * @export
 * @interface ChatApiApiChatOperatorPostRequest
 */
export interface ChatApiApiChatOperatorPostRequest {
  /**
   * Message
   * @type {ChatAdminInput}
   * @memberof ChatApiApiChatOperatorPost
   */
  readonly body?: ChatAdminInput
}

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
  /**
   * 
   * @summary Get list of all dialogs from operator
   * @param {ChatApiApiChatDialogsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatApi
   */
  public apiChatDialogsGet(requestParameters: ChatApiApiChatDialogsGetRequest = {}, options?: any) {
    return ChatApiFp(this.configuration).apiChatDialogsGet(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Get dialog entity
   * @param {ChatApiApiChatDialogsIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatApi
   */
  public apiChatDialogsIdGet(requestParameters: ChatApiApiChatDialogsIdGetRequest, options?: any) {
    return ChatApiFp(this.configuration).apiChatDialogsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Get messages by dialog id
   * @param {ChatApiApiChatDialogsIdMessagesGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatApi
   */
  public apiChatDialogsIdMessagesGet(requestParameters: ChatApiApiChatDialogsIdMessagesGetRequest, options?: any) {
    return ChatApiFp(this.configuration).apiChatDialogsIdMessagesGet(requestParameters.size, requestParameters.id, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * 
   * @summary Send message from operator
   * @param {ChatApiApiChatOperatorPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatApi
   */
  public apiChatOperatorPost(requestParameters: ChatApiApiChatOperatorPostRequest = {}, options?: any) {
    return ChatApiFp(this.configuration).apiChatOperatorPost(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
  }
}
