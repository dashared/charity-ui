/* tslint:disable */
/* eslint-disable */
/**
 * Charity API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ControllersFcmId } from '../models';
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export const NotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Sets firebase token to current session for sending notifications
         * @param {ControllersFcmId} [body] client registration id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotificationsSetTokenPatch: async (body?: ControllersFcmId, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/notifications/set-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof body !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Sets firebase token to current session for sending notifications
         * @param {ControllersFcmId} [body] client registration id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNotificationsSetTokenPatch(body?: ControllersFcmId, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await NotificationsApiAxiosParamCreator(configuration).apiNotificationsSetTokenPatch(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Sets firebase token to current session for sending notifications
         * @param {ControllersFcmId} [body] client registration id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNotificationsSetTokenPatch(body?: ControllersFcmId, options?: any): AxiosPromise<void> {
            return NotificationsApiFp(configuration).apiNotificationsSetTokenPatch(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiNotificationsSetTokenPatch operation in NotificationsApi.
 * @export
 * @interface NotificationsApiApiNotificationsSetTokenPatchRequest
 */
export interface NotificationsApiApiNotificationsSetTokenPatchRequest {
    /**
     * client registration id
     * @type {ControllersFcmId}
     * @memberof NotificationsApiApiNotificationsSetTokenPatch
     */
    readonly body?: ControllersFcmId
}

/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI {
    /**
     * 
     * @summary Sets firebase token to current session for sending notifications
     * @param {NotificationsApiApiNotificationsSetTokenPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public apiNotificationsSetTokenPatch(requestParameters: NotificationsApiApiNotificationsSetTokenPatchRequest = {}, options?: any) {
        return NotificationsApiFp(this.configuration).apiNotificationsSetTokenPatch(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
