/* tslint:disable */
/* eslint-disable */
/**
 * Charity API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BlockchainStatusResponse } from '../models';
/**
 * BatchStatusApi - axios parameter creator
 * @export
 */
export const BatchStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a list of all operation statuses in blockchain
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {string} [sort] Sort param
         * @param {Array<string>} [type] Request type
         * @param {Array<string>} [status] Request status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBatchStatusesGet: async (page?: number, size?: number, sort?: string, type?: Array<string>, status?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/batch-statuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (type) {
                localVarQueryParameter['type'] = type;
            }

            if (status) {
                localVarQueryParameter['status'] = status;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BatchStatusApi - functional programming interface
 * @export
 */
export const BatchStatusApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a list of all operation statuses in blockchain
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {string} [sort] Sort param
         * @param {Array<string>} [type] Request type
         * @param {Array<string>} [status] Request status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBatchStatusesGet(page?: number, size?: number, sort?: string, type?: Array<string>, status?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockchainStatusResponse>> {
            const localVarAxiosArgs = await BatchStatusApiAxiosParamCreator(configuration).apiBatchStatusesGet(page, size, sort, type, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BatchStatusApi - factory interface
 * @export
 */
export const BatchStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Retrieves a list of all operation statuses in blockchain
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {string} [sort] Sort param
         * @param {Array<string>} [type] Request type
         * @param {Array<string>} [status] Request status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBatchStatusesGet(page?: number, size?: number, sort?: string, type?: Array<string>, status?: Array<string>, options?: any): AxiosPromise<BlockchainStatusResponse> {
            return BatchStatusApiFp(configuration).apiBatchStatusesGet(page, size, sort, type, status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiBatchStatusesGet operation in BatchStatusApi.
 * @export
 * @interface BatchStatusApiApiBatchStatusesGetRequest
 */
export interface BatchStatusApiApiBatchStatusesGetRequest {
    /**
     * Page number
     * @type {number}
     * @memberof BatchStatusApiApiBatchStatusesGet
     */
    readonly page?: number

    /**
     * Page size
     * @type {number}
     * @memberof BatchStatusApiApiBatchStatusesGet
     */
    readonly size?: number

    /**
     * Sort param
     * @type {string}
     * @memberof BatchStatusApiApiBatchStatusesGet
     */
    readonly sort?: string

    /**
     * Request type
     * @type {Array<string>}
     * @memberof BatchStatusApiApiBatchStatusesGet
     */
    readonly type?: Array<string>

    /**
     * Request status
     * @type {Array<string>}
     * @memberof BatchStatusApiApiBatchStatusesGet
     */
    readonly status?: Array<string>
}

/**
 * BatchStatusApi - object-oriented interface
 * @export
 * @class BatchStatusApi
 * @extends {BaseAPI}
 */
export class BatchStatusApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves a list of all operation statuses in blockchain
     * @param {BatchStatusApiApiBatchStatusesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchStatusApi
     */
    public apiBatchStatusesGet(requestParameters: BatchStatusApiApiBatchStatusesGetRequest = {}, options?: any) {
        return BatchStatusApiFp(this.configuration).apiBatchStatusesGet(requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.type, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }
}
